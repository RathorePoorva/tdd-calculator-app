{"ast":null,"code":"import _classCallCheck from \"/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/src/component/Calculator.jsx\";\nimport React from \"react\";\nimport \"./css/calculator.css\";\nimport Display from \"./Display\";\nimport Keypad from \"./Keypad\";\n\nvar Calculator = /*#__PURE__*/function (_React$Component) {\n  _inherits(Calculator, _React$Component);\n\n  var _super = _createSuper(Calculator);\n\n  function Calculator() {\n    var _this;\n\n    _classCallCheck(this, Calculator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      //value to be displayed in <Display />\n      displayValue: \"0\",\n      //keys numbers list for <Key />\n      numbers: [\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \".\", \"0\", \"ce\"],\n      //operator key list for <Key />\n      operators: [\"+\", \"-\", \"*\", \"/\"],\n      //operator selected for operation\n      selectedOperator: \"\",\n      //value stored for the operation\n      storedValue: \"\"\n    };\n\n    _this.updateDisplay = function (value) {\n      var displayValue = _this.state.displayValue; //prevent multiple occurence of  \".\" operator\n\n      if (value === \".\" && displayValue.includes(\".\")) {\n        value = \"\";\n      }\n\n      if (value === \"ce\") {\n        //delete last char of displayValue\n        displayValue = displayValue.substr(0, displayValue.length - 1);\n        if (displayValue === \"\") displayValue = \"0\";\n      } else {\n        //replace displayValue with value if displayValue=0 else concatenate it\n        displayValue === \"0\" ? displayValue = value : displayValue += value;\n      }\n\n      _this.setState({\n        displayValue: displayValue\n      });\n    };\n\n    _this.callOperator = function () {\n      var _this$state = _this.state,\n          displayValue = _this$state.displayValue,\n          selectedOperator = _this$state.selectedOperator,\n          storedValue = _this$state.storedValue;\n      var tempStoredValue = displayValue;\n      displayValue = parseInt(displayValue, 10);\n      storedValue = parseInt(storedValue, 10); //perform operation\n\n      switch (selectedOperator) {\n        case \"+\":\n          displayValue = storedValue + displayValue;\n          break;\n\n        case \"-\":\n          displayValue = storedValue - displayValue;\n          break;\n\n        case \"*\":\n          displayValue = storedValue * displayValue;\n          break;\n\n        case \"/\":\n          displayValue = storedValue / displayValue;\n          break;\n\n        default:\n          displayValue = \"0\";\n      }\n\n      displayValue = displayValue.toString();\n      selectedOperator = \"\";\n\n      _this.setState({\n        displayValue: displayValue,\n        selectedOperator: selectedOperator,\n        storedValue: storedValue\n      });\n    };\n\n    _this.setOperator = function (value) {\n      var _this$state2 = _this.state,\n          displayValue = _this$state2.displayValue,\n          selectedOperator = _this$state2.selectedOperator,\n          storedValue = _this$state2.storedValue;\n\n      if (selectedOperator === \"\") {\n        //when selectedOperator is empty\n        //update storedValue to displayValue\n        storedValue = displayValue;\n        displayValue = \"0\";\n        selectedOperator = value;\n      } else {\n        //when selectedOperator is not an empty string\n        selectedOperator = value;\n      }\n\n      _this.setState({\n        displayValue: displayValue,\n        selectedOperator: selectedOperator,\n        storedValue: storedValue\n      });\n    };\n\n    _this.render = function () {\n      var _this$state3 = _this.state,\n          displayValue = _this$state3.displayValue,\n          numbers = _this$state3.numbers,\n          operators = _this$state3.operators;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"calculator-container\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Display, {\n        displayValue: displayValue,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Keypad, {\n        callOperator: _this.callOperator,\n        numbers: numbers,\n        operators: operators,\n        setOperator: _this.setOperator,\n        updateDisplay: _this.updateDisplay,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  return Calculator;\n}(React.Component);\n\nexport default Calculator;","map":{"version":3,"sources":["/Users/poorvarathore/Documents/Poorva's Workspace/tdd-calculator-app/src/component/Calculator.jsx"],"names":["React","Display","Keypad","Calculator","state","displayValue","numbers","operators","selectedOperator","storedValue","updateDisplay","value","includes","substr","length","setState","callOperator","tempStoredValue","parseInt","toString","setOperator","render","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./css/calculator.css\";\nimport Display from \"./Display\";\nimport Keypad from \"./Keypad\";\n\nclass Calculator extends React.Component {\n  state = {\n    //value to be displayed in <Display />\n    displayValue: \"0\",\n    //keys numbers list for <Key />\n    numbers: [\"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \".\", \"0\", \"ce\"],\n    //operator key list for <Key />\n    operators: [\"+\", \"-\", \"*\", \"/\"],\n    //operator selected for operation\n    selectedOperator: \"\",\n    //value stored for the operation\n    storedValue: \"\",\n  };\n  //to update the display of the screen\n  updateDisplay = (value) => {\n    let { displayValue } = this.state;\n\n    //prevent multiple occurence of  \".\" operator\n    if (value === \".\" && displayValue.includes(\".\")) {\n      value = \"\";\n    }\n    if (value === \"ce\") {\n      //delete last char of displayValue\n      displayValue = displayValue.substr(0, displayValue.length - 1);\n      if (displayValue === \"\") displayValue = \"0\";\n    } else {\n      //replace displayValue with value if displayValue=0 else concatenate it\n      displayValue === \"0\" ? (displayValue = value) : (displayValue += value);\n    }\n    this.setState({ displayValue });\n  };\n  //to call the operator for operation\n  callOperator = () => {\n    let { displayValue, selectedOperator, storedValue } = this.state;\n    const tempStoredValue = displayValue;\n    displayValue = parseInt(displayValue, 10);\n    storedValue = parseInt(storedValue, 10);\n\n    //perform operation\n    switch (selectedOperator) {\n      case \"+\":\n        displayValue = storedValue + displayValue;\n        break;\n      case \"-\":\n        displayValue = storedValue - displayValue;\n        break;\n      case \"*\":\n        displayValue = storedValue * displayValue;\n        break;\n      case \"/\":\n        displayValue = storedValue / displayValue;\n        break;\n      default:\n        displayValue = \"0\";\n    }\n    displayValue = displayValue.toString();\n    selectedOperator = \"\";\n    this.setState({ displayValue, selectedOperator, storedValue });\n  };\n  //to set the operator for operation\n  setOperator = (value) => {\n    let { displayValue, selectedOperator, storedValue } = this.state;\n    if (selectedOperator === \"\") {\n      //when selectedOperator is empty\n      //update storedValue to displayValue\n      storedValue = displayValue;\n      displayValue = \"0\";\n      selectedOperator = value;\n    } else {\n      //when selectedOperator is not an empty string\n      selectedOperator = value;\n    }\n    this.setState({ displayValue, selectedOperator, storedValue });\n  };\n\n  render = () => {\n    const { displayValue, numbers, operators } = this.state;\n    return (\n      <div className=\"calculator-container\">\n        <Display displayValue={displayValue} />\n        <Keypad\n          callOperator={this.callOperator}\n          numbers={numbers}\n          operators={operators}\n          setOperator={this.setOperator}\n          updateDisplay={this.updateDisplay}\n        />\n      </div>\n    );\n  };\n}\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}